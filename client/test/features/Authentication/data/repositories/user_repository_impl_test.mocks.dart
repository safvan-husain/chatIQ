// Mocks generated by Mockito 5.4.0 from annotations
// in client/test/features/Authentication/data/repositories/user_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:client/core/helper/database/data_base_helper.dart' as _i3;
import 'package:client/features/Authentication/data/datasources/user_local_data_source.dart'
    as _i7;
import 'package:client/features/Authentication/data/datasources/user_remote_data_source.dart'
    as _i10;
import 'package:client/features/Authentication/data/models/remote_message_model.dart'
    as _i9;
import 'package:client/features/Authentication/data/models/user_model.dart'
    as _i6;
import 'package:client/features/Authentication/domain/entities/user.dart'
    as _i4;
import 'package:client/platform/network_info.dart' as _i11;
import 'package:http/http.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSharedPreferences_0 extends _i1.SmartFake
    implements _i2.SharedPreferences {
  _FakeSharedPreferences_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseHelper_1 extends _i1.SmartFake
    implements _i3.DatabaseHelper {
  _FakeDatabaseHelper_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_2 extends _i1.SmartFake implements _i4.User {
  _FakeUser_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClient_3 extends _i1.SmartFake implements _i5.Client {
  _FakeClient_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserModel_4 extends _i1.SmartFake implements _i6.UserModel {
  _FakeUserModel_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserLocalDataSource extends _i1.Mock
    implements _i7.UserLocalDataSource {
  MockUserLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SharedPreferences get sharedPreferences => (super.noSuchMethod(
        Invocation.getter(#sharedPreferences),
        returnValue: _FakeSharedPreferences_0(
          this,
          Invocation.getter(#sharedPreferences),
        ),
      ) as _i2.SharedPreferences);
  @override
  _i3.DatabaseHelper get dataBaseHelper => (super.noSuchMethod(
        Invocation.getter(#dataBaseHelper),
        returnValue: _FakeDatabaseHelper_1(
          this,
          Invocation.getter(#dataBaseHelper),
        ),
      ) as _i3.DatabaseHelper);
  @override
  set dataBaseHelper(_i3.DatabaseHelper? _dataBaseHelper) => super.noSuchMethod(
        Invocation.setter(
          #dataBaseHelper,
          _dataBaseHelper,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<_i4.User> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i8.Future<_i4.User>.value(_FakeUser_2(
          this,
          Invocation.method(
            #getUser,
            [],
          ),
        )),
      ) as _i8.Future<_i4.User>);
  @override
  _i8.Future<void> cacheUser(_i4.User? user) => (super.noSuchMethod(
        Invocation.method(
          #cacheUser,
          [user],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> cacheAllNewMessages(
          List<_i9.RemoteMesseageModel>? messeges) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheAllNewMessages,
          [messeges],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [UserRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRemoteDataSource extends _i1.Mock
    implements _i10.UserRemoteDataSource {
  MockUserRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Client get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeClient_3(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i5.Client);
  @override
  set httpClient(_i5.Client? _httpClient) => super.noSuchMethod(
        Invocation.setter(
          #httpClient,
          _httpClient,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<_i6.UserModel> getUser(
    String? emailorUsername,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [
            emailorUsername,
            password,
          ],
        ),
        returnValue: _i8.Future<_i6.UserModel>.value(_FakeUserModel_4(
          this,
          Invocation.method(
            #getUser,
            [
              emailorUsername,
              password,
            ],
          ),
        )),
      ) as _i8.Future<_i6.UserModel>);
  @override
  _i8.Future<_i6.UserModel> getUserWithGoogle(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserWithGoogle,
          [email],
        ),
        returnValue: _i8.Future<_i6.UserModel>.value(_FakeUserModel_4(
          this,
          Invocation.method(
            #getUserWithGoogle,
            [email],
          ),
        )),
      ) as _i8.Future<_i6.UserModel>);
  @override
  _i8.Future<_i6.UserModel> registerUser(
    String? email,
    String? username,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerUser,
          [
            email,
            username,
            password,
          ],
        ),
        returnValue: _i8.Future<_i6.UserModel>.value(_FakeUserModel_4(
          this,
          Invocation.method(
            #registerUser,
            [
              email,
              username,
              password,
            ],
          ),
        )),
      ) as _i8.Future<_i6.UserModel>);
  @override
  _i8.Future<List<_i9.RemoteMesseageModel>> getUnredChats(String? authtoken) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUnredChats,
          [authtoken],
        ),
        returnValue: _i8.Future<List<_i9.RemoteMesseageModel>>.value(
            <_i9.RemoteMesseageModel>[]),
      ) as _i8.Future<List<_i9.RemoteMesseageModel>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i11.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}
