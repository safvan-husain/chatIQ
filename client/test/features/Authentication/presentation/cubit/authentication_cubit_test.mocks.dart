// Mocks generated by Mockito 5.4.0 from annotations
// in client/test/features/Authentication/presentation/cubit/authentication_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:client/core/error/failure.dart' as _i6;
import 'package:client/core/usecases/use_case.dart' as _i10;
import 'package:client/features/Authentication/domain/entities/user.dart'
    as _i7;
import 'package:client/features/Authentication/domain/repositories/user_repository.dart'
    as _i2;
import 'package:client/features/Authentication/domain/usecases/get_cache_user.dart'
    as _i9;
import 'package:client/features/Authentication/domain/usecases/get_user.dart'
    as _i4;
import 'package:client/features/Authentication/domain/usecases/login_with_google.dart'
    as _i11;
import 'package:client/features/Authentication/domain/usecases/register_user.dart'
    as _i8;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserRepository_0 extends _i1.SmartFake
    implements _i2.UserRepository {
  _FakeUserRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUser extends _i1.Mock implements _i4.GetUser {
  MockGetUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.UserRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.User>> call(
          _i4.GetUserParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.User>>.value(
            _FakeEither_1<_i6.Failure, _i7.User>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.User>>);
}

/// A class which mocks [RegisterUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterUser extends _i1.Mock implements _i8.RegisterUser {
  MockRegisterUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get authenticationRepository => (super.noSuchMethod(
        Invocation.getter(#authenticationRepository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#authenticationRepository),
        ),
      ) as _i2.UserRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.User>> call(
          _i8.RegisterUserParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.User>>.value(
            _FakeEither_1<_i6.Failure, _i7.User>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.User>>);
}

/// A class which mocks [GetCachedUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCachedUser extends _i1.Mock implements _i9.GetCachedUser {
  MockGetCachedUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.UserRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.User>> call(_i10.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.User>>.value(
            _FakeEither_1<_i6.Failure, _i7.User>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.User>>);
}

/// A class which mocks [LoginWithGoogle].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginWithGoogle extends _i1.Mock implements _i11.LoginWithGoogle {
  MockLoginWithGoogle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i2.UserRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.User>> call(
          _i11.LoginWithGoogleParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.User>>.value(
            _FakeEither_1<_i6.Failure, _i7.User>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.User>>);
}
