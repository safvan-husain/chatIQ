// Mocks generated by Mockito 5.4.0 from annotations
// in client/test/features/home/data/datasources/home_local_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:client/common/entity/message.dart' as _i3;
import 'package:client/core/helper/database/data_base_helper.dart' as _i5;
import 'package:client/features/home/presentation/cubit/home_cubit.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i7;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMessage_1 extends _i1.SmartFake implements _i3.Message {
  _FakeMessage_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNewMessages_2 extends _i1.SmartFake implements _i4.NewMessages {
  _FakeNewMessages_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_3 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i5.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Database get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeDatabase_0(
          this,
          Invocation.getter(#db),
        ),
      ) as _i2.Database);
  @override
  _i6.Future<void> clearAllData() => (super.noSuchMethod(
        Invocation.method(
          #clearAllData,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<_i3.Message> fetchLocalMessage(int? id) => (super.noSuchMethod(
        Invocation.method(
          #fetchLocalMessage,
          [id],
        ),
        returnValue: _i6.Future<_i3.Message>.value(_FakeMessage_1(
          this,
          Invocation.method(
            #fetchLocalMessage,
            [id],
          ),
        )),
      ) as _i6.Future<_i3.Message>);
  @override
  _i6.Future<void> updateDBColumn({
    required String? tableName,
    required Map<String, dynamic>? object,
    required int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDBColumn,
          [],
          {
            #tableName: tableName,
            #object: object,
            #id: id,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<_i4.NewMessages> insertAMessageToDB(
    _i3.Message? message,
    String? chatter,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertAMessageToDB,
          [
            message,
            chatter,
          ],
        ),
        returnValue: _i6.Future<_i4.NewMessages>.value(_FakeNewMessages_2(
          this,
          Invocation.method(
            #insertAMessageToDB,
            [
              message,
              chatter,
            ],
          ),
        )),
      ) as _i6.Future<_i4.NewMessages>);
  @override
  _i6.Future<_i3.Message?> fetchLastMessageFromAChat(int? chatId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchLastMessageFromAChat,
          [chatId],
        ),
        returnValue: _i6.Future<_i3.Message?>.value(),
      ) as _i6.Future<_i3.Message?>);
  @override
  _i6.Future<List<dynamic>> fetchAllMessageFromAChat(int? chatId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllMessageFromAChat,
          [chatId],
        ),
        returnValue: _i6.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i6.Future<List<dynamic>>);
  @override
  _i6.Future<List<Map<String, dynamic>>> getOrInsertUsersFromDB({
    String? userName,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrInsertUsersFromDB,
          [],
          {
            #userName: userName,
            #id: id,
          },
        ),
        returnValue: _i6.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i6.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i7.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);
  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);
  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);
  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);
  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);
  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);
  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);
  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);
  @override
  _i6.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  _i6.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [Message].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessage extends _i1.Mock implements _i3.Message {
  MockMessage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set chatId(int? _chatId) => super.noSuchMethod(
        Invocation.setter(
          #chatId,
          _chatId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set id(int? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get content => (super.noSuchMethod(
        Invocation.getter(#content),
        returnValue: '',
      ) as String);
  @override
  bool get isme => (super.noSuchMethod(
        Invocation.getter(#isme),
        returnValue: false,
      ) as bool);
  @override
  set isme(bool? _isme) => super.noSuchMethod(
        Invocation.setter(
          #isme,
          _isme,
        ),
        returnValueForMissingStub: null,
      );
  @override
  DateTime get time => (super.noSuchMethod(
        Invocation.getter(#time),
        returnValue: _FakeDateTime_3(
          this,
          Invocation.getter(#time),
        ),
      ) as DateTime);
  @override
  set time(DateTime? _time) => super.noSuchMethod(
        Invocation.setter(
          #time,
          _time,
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic setChatId(int? id) => super.noSuchMethod(Invocation.method(
        #setChatId,
        [id],
      ));
}
