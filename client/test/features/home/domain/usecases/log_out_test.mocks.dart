// Mocks generated by Mockito 5.4.0 from annotations
// in client/test/features/home/domain/usecases/log_out_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:client/common/entity/message.dart' as _i8;
import 'package:client/core/error/failure.dart' as _i5;
import 'package:client/features/home/domain/entities/contact.dart' as _i6;
import 'package:client/features/home/domain/repositories/home_repositoy.dart'
    as _i3;
import 'package:client/features/home/presentation/cubit/home_cubit.dart' as _i7;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepository extends _i1.Mock implements _i3.HomeRepository {
  MockHomeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Contact>>> getAllPeople(
          {required String? token}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllPeople,
          [],
          {#token: token},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Contact>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Contact>>(
          this,
          Invocation.method(
            #getAllPeople,
            [],
            {#token: token},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Contact>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.NewMessages>>> getLocalChats() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocalChats,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i7.NewMessages>>>.value(
                _FakeEither_0<_i5.Failure, List<_i7.NewMessages>>(
          this,
          Invocation.method(
            #getLocalChats,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i7.NewMessages>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.NewMessages>> cacheMessage(
    _i8.Message? message,
    String? from,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheMessage,
          [
            message,
            from,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i7.NewMessages>>.value(
            _FakeEither_0<_i5.Failure, _i7.NewMessages>(
          this,
          Invocation.method(
            #cacheMessage,
            [
              message,
              from,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.NewMessages>>);
}
