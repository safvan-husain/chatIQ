// Mocks generated by Mockito 5.4.0 from annotations
// in client/test/features/home/domain/usecases/cache_message_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:client/common/entity/message.dart' as _i4;
import 'package:client/core/error/failure.dart' as _i7;
import 'package:client/features/home/domain/entities/contact.dart' as _i8;
import 'package:client/features/home/domain/entities/user.dart' as _i3;
import 'package:client/features/home/domain/repositories/home_repositoy.dart'
    as _i5;
import 'package:client/features/home/domain/usecases/cache_message.dart'
    as _i10;
import 'package:client/features/home/presentation/cubit/home_cubit.dart' as _i9;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_1 extends _i1.SmartFake implements _i3.User {
  _FakeUser_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMessage_2 extends _i1.SmartFake implements _i4.Message {
  _FakeMessage_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_3 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepository extends _i1.Mock implements _i5.HomeRepository {
  MockHomeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, bool>> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, bool>>.value(
            _FakeEither_0<_i7.Failure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, bool>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.Contact>>> getAllPeople(
          {required String? token}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllPeople,
          [],
          {#token: token},
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i8.Contact>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.Contact>>(
          this,
          Invocation.method(
            #getAllPeople,
            [],
            {#token: token},
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.Contact>>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i9.NewMessages>>> getLocalChats() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocalChats,
          [],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i9.NewMessages>>>.value(
                _FakeEither_0<_i7.Failure, List<_i9.NewMessages>>(
          this,
          Invocation.method(
            #getLocalChats,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i9.NewMessages>>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, _i9.NewMessages>> cacheMessage(
    _i4.Message? message,
    String? from,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheMessage,
          [
            message,
            from,
          ],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i9.NewMessages>>.value(
            _FakeEither_0<_i7.Failure, _i9.NewMessages>(
          this,
          Invocation.method(
            #cacheMessage,
            [
              message,
              from,
            ],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i9.NewMessages>>);
}

/// A class which mocks [NewMessages].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewMessages extends _i1.Mock implements _i9.NewMessages {
  MockNewMessages() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.User get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakeUser_1(
          this,
          Invocation.getter(#user),
        ),
      ) as _i3.User);
  @override
  set user(_i3.User? _user) => super.noSuchMethod(
        Invocation.setter(
          #user,
          _user,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get messageCount => (super.noSuchMethod(
        Invocation.getter(#messageCount),
        returnValue: 0,
      ) as int);
  @override
  set messageCount(int? _messageCount) => super.noSuchMethod(
        Invocation.setter(
          #messageCount,
          _messageCount,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CacheMessageParams].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheMessageParams extends _i1.Mock
    implements _i10.CacheMessageParams {
  MockCacheMessageParams() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Message get message => (super.noSuchMethod(
        Invocation.getter(#message),
        returnValue: _FakeMessage_2(
          this,
          Invocation.getter(#message),
        ),
      ) as _i4.Message);
  @override
  String get from => (super.noSuchMethod(
        Invocation.getter(#from),
        returnValue: '',
      ) as String);
}

/// A class which mocks [Message].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessage extends _i1.Mock implements _i4.Message {
  MockMessage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set chatId(int? _chatId) => super.noSuchMethod(
        Invocation.setter(
          #chatId,
          _chatId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set id(int? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get content => (super.noSuchMethod(
        Invocation.getter(#content),
        returnValue: '',
      ) as String);
  @override
  bool get isme => (super.noSuchMethod(
        Invocation.getter(#isme),
        returnValue: false,
      ) as bool);
  @override
  set isme(bool? _isme) => super.noSuchMethod(
        Invocation.setter(
          #isme,
          _isme,
        ),
        returnValueForMissingStub: null,
      );
  @override
  DateTime get time => (super.noSuchMethod(
        Invocation.getter(#time),
        returnValue: _FakeDateTime_3(
          this,
          Invocation.getter(#time),
        ),
      ) as DateTime);
  @override
  set time(DateTime? _time) => super.noSuchMethod(
        Invocation.setter(
          #time,
          _time,
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic setChatId(int? id) => super.noSuchMethod(Invocation.method(
        #setChatId,
        [id],
      ));
}
