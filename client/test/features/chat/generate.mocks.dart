// Mocks generated by Mockito 5.4.0 from annotations
// in client/test/features/chat/generate.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:client/common/entity/message.dart' as _i4;
import 'package:client/core/error/failure.dart' as _i10;
import 'package:client/core/helper/database/data_base_helper.dart' as _i6;
import 'package:client/features/chat/data/datasources/chat_local_data_source.dart'
    as _i11;
import 'package:client/features/chat/data/datasources/chat_remote_data_source.dart'
    as _i12;
import 'package:client/features/chat/domain/repositories/chat_repository.dart'
    as _i8;
import 'package:client/features/home/domain/entities/user.dart' as _i7;
import 'package:client/features/home/presentation/cubit/home_cubit.dart' as _i5;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_1 extends _i1.SmartFake implements _i3.Database {
  _FakeDatabase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMessage_2 extends _i1.SmartFake implements _i4.Message {
  _FakeMessage_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNewMessages_3 extends _i1.SmartFake implements _i5.NewMessages {
  _FakeNewMessages_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_4 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseHelper_5 extends _i1.SmartFake
    implements _i6.DatabaseHelper {
  _FakeDatabaseHelper_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_6 extends _i1.SmartFake implements _i7.User {
  _FakeUser_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChatRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatRepository extends _i1.Mock implements _i8.ChatRepository {
  MockChatRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.Either<_i10.Failure, List<_i4.Message>>> showMessages(
          String? chatId) =>
      (super.noSuchMethod(
        Invocation.method(
          #showMessages,
          [chatId],
        ),
        returnValue:
            _i9.Future<_i2.Either<_i10.Failure, List<_i4.Message>>>.value(
                _FakeEither_0<_i10.Failure, List<_i4.Message>>(
          this,
          Invocation.method(
            #showMessages,
            [chatId],
          ),
        )),
      ) as _i9.Future<_i2.Either<_i10.Failure, List<_i4.Message>>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, void>> updateLasVisit(String? userName) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLasVisit,
          [userName],
        ),
        returnValue: _i9.Future<_i2.Either<_i10.Failure, void>>.value(
            _FakeEither_0<_i10.Failure, void>(
          this,
          Invocation.method(
            #updateLasVisit,
            [userName],
          ),
        )),
      ) as _i9.Future<_i2.Either<_i10.Failure, void>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, _i4.Message>> sendMessage(
    _i4.Message? message,
    String? myid,
    String? to,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [
            message,
            myid,
            to,
          ],
        ),
        returnValue: _i9.Future<_i2.Either<_i10.Failure, _i4.Message>>.value(
            _FakeEither_0<_i10.Failure, _i4.Message>(
          this,
          Invocation.method(
            #sendMessage,
            [
              message,
              myid,
              to,
            ],
          ),
        )),
      ) as _i9.Future<_i2.Either<_i10.Failure, _i4.Message>>);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i6.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Database get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeDatabase_1(
          this,
          Invocation.getter(#db),
        ),
      ) as _i3.Database);
  @override
  _i9.Future<void> deleteAllData() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllData,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<_i4.Message> getMessageWithId(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getMessageWithId,
          [id],
        ),
        returnValue: _i9.Future<_i4.Message>.value(_FakeMessage_2(
          this,
          Invocation.method(
            #getMessageWithId,
            [id],
          ),
        )),
      ) as _i9.Future<_i4.Message>);
  @override
  _i9.Future<void> updateDBColumn({
    required String? tableName,
    required Map<String, dynamic>? object,
    required int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDBColumn,
          [],
          {
            #tableName: tableName,
            #object: object,
            #id: id,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<_i5.NewMessages> insertAMessageToDB(
    _i4.Message? message,
    String? chatterId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertAMessageToDB,
          [
            message,
            chatterId,
          ],
        ),
        returnValue: _i9.Future<_i5.NewMessages>.value(_FakeNewMessages_3(
          this,
          Invocation.method(
            #insertAMessageToDB,
            [
              message,
              chatterId,
            ],
          ),
        )),
      ) as _i9.Future<_i5.NewMessages>);
  @override
  _i9.Future<_i4.Message?> fetchLastMessageFromAChat(int? chatId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchLastMessageFromAChat,
          [chatId],
        ),
        returnValue: _i9.Future<_i4.Message?>.value(),
      ) as _i9.Future<_i4.Message?>);
  @override
  _i9.Future<List<dynamic>> fetchAllMessageFromAChat(int? chatId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllMessageFromAChat,
          [chatId],
        ),
        returnValue: _i9.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i9.Future<List<dynamic>>);
  @override
  _i9.Future<Map<String, dynamic>> getOrInsertUserFromDB({
    String? userName,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrInsertUserFromDB,
          [],
          {
            #userName: userName,
            #id: id,
          },
        ),
        returnValue:
            _i9.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i9.Future<Map<String, dynamic>>);
  @override
  _i9.Future<List<Map<String, Object?>>> getAllFriends() => (super.noSuchMethod(
        Invocation.method(
          #getAllFriends,
          [],
        ),
        returnValue: _i9.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i9.Future<List<Map<String, Object?>>>);
}

/// A class which mocks [Message].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessage extends _i1.Mock implements _i4.Message {
  MockMessage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set chatId(int? _chatId) => super.noSuchMethod(
        Invocation.setter(
          #chatId,
          _chatId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set id(int? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get content => (super.noSuchMethod(
        Invocation.getter(#content),
        returnValue: '',
      ) as String);
  @override
  bool get isme => (super.noSuchMethod(
        Invocation.getter(#isme),
        returnValue: false,
      ) as bool);
  @override
  set isme(bool? _isme) => super.noSuchMethod(
        Invocation.setter(
          #isme,
          _isme,
        ),
        returnValueForMissingStub: null,
      );
  @override
  DateTime get time => (super.noSuchMethod(
        Invocation.getter(#time),
        returnValue: _FakeDateTime_4(
          this,
          Invocation.getter(#time),
        ),
      ) as DateTime);
  @override
  set time(DateTime? _time) => super.noSuchMethod(
        Invocation.setter(
          #time,
          _time,
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic setChatId(int? id) => super.noSuchMethod(Invocation.method(
        #setChatId,
        [id],
      ));
}

/// A class which mocks [ChatLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatLocalDataSource extends _i1.Mock
    implements _i11.ChatLocalDataSource {
  MockChatLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.DatabaseHelper get databaseHelper => (super.noSuchMethod(
        Invocation.getter(#databaseHelper),
        returnValue: _FakeDatabaseHelper_5(
          this,
          Invocation.getter(#databaseHelper),
        ),
      ) as _i6.DatabaseHelper);
  @override
  _i9.Future<void> cacheFriend(String? username) => (super.noSuchMethod(
        Invocation.method(
          #cacheFriend,
          [username],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<void> updateLastVisit(String? userName) => (super.noSuchMethod(
        Invocation.method(
          #updateLastVisit,
          [userName],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<_i4.Message> fetchLocalMessage(int? id) => (super.noSuchMethod(
        Invocation.method(
          #fetchLocalMessage,
          [id],
        ),
        returnValue: _i9.Future<_i4.Message>.value(_FakeMessage_2(
          this,
          Invocation.method(
            #fetchLocalMessage,
            [id],
          ),
        )),
      ) as _i9.Future<_i4.Message>);
  @override
  _i9.Future<_i4.Message> cacheMessage(
    _i4.Message? message,
    String? to,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheMessage,
          [
            message,
            to,
          ],
        ),
        returnValue: _i9.Future<_i4.Message>.value(_FakeMessage_2(
          this,
          Invocation.method(
            #cacheMessage,
            [
              message,
              to,
            ],
          ),
        )),
      ) as _i9.Future<_i4.Message>);
  @override
  _i9.Future<List<_i4.Message>> showCachedMessages(String? to) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCachedMessages,
          [to],
        ),
        returnValue: _i9.Future<List<_i4.Message>>.value(<_i4.Message>[]),
      ) as _i9.Future<List<_i4.Message>>);
}

/// A class which mocks [ChatRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatRemoteDataSource extends _i1.Mock
    implements _i12.ChatRemoteDataSource {
  MockChatRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<bool> sendMessage(
    _i4.Message? message,
    String? myid,
    String? to,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [
            message,
            myid,
            to,
          ],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);
}

/// A class which mocks [NewMessages].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewMessages extends _i1.Mock implements _i5.NewMessages {
  MockNewMessages() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.User get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakeUser_6(
          this,
          Invocation.getter(#user),
        ),
      ) as _i7.User);
  @override
  set user(_i7.User? _user) => super.noSuchMethod(
        Invocation.setter(
          #user,
          _user,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get messageCount => (super.noSuchMethod(
        Invocation.getter(#messageCount),
        returnValue: 0,
      ) as int);
  @override
  set messageCount(int? _messageCount) => super.noSuchMethod(
        Invocation.setter(
          #messageCount,
          _messageCount,
        ),
        returnValueForMissingStub: null,
      );
}
